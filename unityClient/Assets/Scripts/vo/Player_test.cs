// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;



public struct Player_test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Player_test GetRootAsPlayer_test(ByteBuffer _bb) { return GetRootAsPlayer_test(_bb, new Player_test()); }
  public static Player_test GetRootAsPlayer_test(ByteBuffer _bb, Player_test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Player_test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ProtoclId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProtoclIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetProtoclIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetProtoclIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Id { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Gender { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGenderBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGenderBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGenderArray() { return __p.__vector_as_array<byte>(8); }
  public string State { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(10); }
  public float DestPosX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DestPosY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DestPosZ { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float X { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Player_test> CreatePlayer_test(FlatBufferBuilder builder,
      StringOffset Protocl_IdOffset = default(StringOffset),
      StringOffset IdOffset = default(StringOffset),
      StringOffset GenderOffset = default(StringOffset),
      StringOffset StateOffset = default(StringOffset),
      float DestPos_x = 0.0f,
      float DestPos_y = 0.0f,
      float DestPos_z = 0.0f,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartTable(10);
    Player_test.AddZ(builder, z);
    Player_test.AddY(builder, y);
    Player_test.AddX(builder, x);
    Player_test.AddDestPosZ(builder, DestPos_z);
    Player_test.AddDestPosY(builder, DestPos_y);
    Player_test.AddDestPosX(builder, DestPos_x);
    Player_test.AddState(builder, StateOffset);
    Player_test.AddGender(builder, GenderOffset);
    Player_test.AddId(builder, IdOffset);
    Player_test.AddProtoclId(builder, Protocl_IdOffset);
    return Player_test.EndPlayer_test(builder);
  }

  public static void StartPlayer_test(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddProtoclId(FlatBufferBuilder builder, StringOffset ProtoclIdOffset) { builder.AddOffset(0, ProtoclIdOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(1, IdOffset.Value, 0); }
  public static void AddGender(FlatBufferBuilder builder, StringOffset GenderOffset) { builder.AddOffset(2, GenderOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, StringOffset StateOffset) { builder.AddOffset(3, StateOffset.Value, 0); }
  public static void AddDestPosX(FlatBufferBuilder builder, float DestPosX) { builder.AddFloat(4, DestPosX, 0.0f); }
  public static void AddDestPosY(FlatBufferBuilder builder, float DestPosY) { builder.AddFloat(5, DestPosY, 0.0f); }
  public static void AddDestPosZ(FlatBufferBuilder builder, float DestPosZ) { builder.AddFloat(6, DestPosZ, 0.0f); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(7, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(8, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(9, z, 0.0f); }
  public static Offset<Player_test> EndPlayer_test(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Player_test>(o);
  }
  public static void FinishPlayer_testBuffer(FlatBufferBuilder builder, Offset<Player_test> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayer_testBuffer(FlatBufferBuilder builder, Offset<Player_test> offset) { builder.FinishSizePrefixed(offset.Value); }
};

